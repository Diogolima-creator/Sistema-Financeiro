{"version":3,"sources":["App.styles.js","data/items.js","data/categories.js","helpers/dateFilter.js","components/TableArea/styles.js","components/TableItem/styles.js","components/TableItem/index.jsx","components/TableArea/index.jsx","components/InfoArea/styles.js","components/ResumeItem/styles.js","components/ResumeItem/index.jsx","components/InfoArea/index.jsx","components/InputArea/styles.js","components/InputArea/index.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Container","styled","div","Header","HeaderText","h1","Body","items","date","Date","category","title","value","type","color","expense","formatDate","year","getFullYear","month","getMonth","day","getDate","addZeroToDate","n","categoriesType","categoryType","i","formatCurrentMonth","currentMonth","split","parseInt","Table","table","TableHeadColumn","th","width","props","TableLine","tr","TableColumn","td","Category","Value","TableItem","item","TableArea","list","map","index","MonthArea","MonthArrow","MonthTitle","ResumeArea","Title","Info","ResumeItem","InfoArea","onMonthChange","income","onClick","currentDate","setMonth","InputLabel","label","InputTitle","Input","input","Select","select","Button","button","InputArea","onAdd","useState","dateField","setDateField","categoryField","setCategoryField","titleField","setTitleField","valueField","setValueField","categoryKeys","Object","keys","clearFields","onChange","e","target","key","parseFloat","erros","isNaN","getTime","push","includes","length","alert","join","App","setList","filteredList","setFilteredList","now","getCurrentMonth","setCurrentMonth","setIncome","setExpense","useEffect","newList","FilterListByMonth","incomeCount","expenseCount","newMonth","Item","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.547184cb.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n\r\n`;\r\n\r\nexport const Header = styled.div`\r\n    background-color: darkblue;\r\n    height: 150px;\r\n    text-align: center;\r\n\r\n`;\r\n\r\nexport const HeaderText = styled.h1`\r\n    margin: 0;\r\n    padding: 0;\r\n    color: #FFF;\r\n    padding-top: 30px;\r\n\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    margin: auto;\r\n    max-width: 980px;\r\n    margin-bottom: 50px;\r\n`;\r\n","export const items = [\r\n  { date: new Date(2021, 9, 4), category: 'food', title: 'McDonalds', value: 32.12 },  \r\n  { date: new Date(2021, 9, 9), category: 'food', title: 'Burguer King', value: 28 },\r\n  { date: new Date(2021, 9, 16), category: 'rent', title: 'Aluguel Apt', value: 2300. },\r\n  { date: new Date(2021, 10, 18), category: 'salary', title: 'Salário ACME', value: 4500 }\r\n];","export const category = [\r\n    { type: 'food', title: 'Alimentação', color: 'blue', expense: true },\r\n    { type: 'rent', title: 'Aluguel', color: 'brown', expense: true},\r\n    { type: 'salary', title: 'Salário', color: 'green', expense: false}\r\n];\r\n\r\n","import { category } from \"../data/categories\";\r\n\r\n\r\nexport const getCurrentMonth = () =>{\r\n    let now = new Date();\r\n    return `${now.getFullYear()}-${now.getMonth()+1}`;\r\n}\r\n\r\nexport const FilterListByMonth = (list, date) => {\r\n    let newList = [];\r\n    let[year, month] = date.split('-');\r\n\r\n    for(let i in list){\r\n        if(\r\n            list[i].date.getFullYear() === parseInt(year) &&\r\n            (list[i].date.getMonth() +1) === parseInt(month)\r\n        ){\r\n            newList.push(list[i]);\r\n        }\r\n    }\r\n\r\n    return newList;\r\n};\r\n\r\nexport const formatDate = ( Date ) => {\r\n    let year = Date.getFullYear();\r\n    let month = Date.getMonth() +1;\r\n    let day = Date.getDate();\r\n\r\n    return `${addZeroToDate(day)}/${addZeroToDate(month)}/${year}`;\r\n}\r\n\r\nconst addZeroToDate = ( n ) => {\r\n    if(n<10){\r\n        return `0${n}`;\r\n    }else {\r\n        return `${n}`;\r\n    }\r\n}\r\n\r\nexport const categoriesType = ( categoryType ) => {\r\n    for(var i=0;i<3;i++){\r\n        if(category[i].type === categoryType){\r\n            return category[i];\r\n        }\r\n    } \r\n}\r\n\r\nexport const categoriesTitle = ( title ) => {\r\n    for(var i=0;i<3;i++){\r\n        if(category[i].title === title){\r\n            return category[i];\r\n        }\r\n    } \r\n}\r\n\r\nexport const formatCurrentMonth = (currentMonth) => {\r\n    let [year, month] = currentMonth.split('-');\r\n    let months = ['Janeiro', 'Fevereiro', 'Março', 'Abril',\r\n                'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro',\r\n                'Outubro', 'Novembro', 'Dezembro'];\r\n    return `${months[parseInt(month)-1]} de ${year}`;\r\n\r\n}","import styled from \"styled-components\"\r\n\r\nexport const Table = styled.table`\r\n    width: 100%;\r\n    background-color: #FFF;\r\n    padding: 20px;\r\n    box-shadow: 0px 0px 5px #CCC;\r\n    border-radius: 10px;\r\n    margin-top: 20px;\r\n`;\r\n\r\nexport const TableHeadColumn = styled.th(({ width }) => (\r\n    `\r\n    width: ${props => props.width ? `${props.width}px` : 'auto'};\r\n    padding: 10px 0;\r\n    text-align: left;\r\n    \r\n    `\r\n\r\n));","import styled from \"styled-components\";\r\n\r\nexport const TableLine = styled.tr`\r\n\r\n`;\r\n\r\nexport const TableColumn = styled.td`\r\n    padding: 10px 0;\r\n`;\r\n\r\nexport const Category = styled.div(({ color }) => (`\r\n    display: inline-block;\r\n    padding: 5px 10px;\r\n    border-radius: 5px;\r\n    color: #FFF;\r\n    background-color: ${color};\r\n`\r\n));\r\n\r\n\r\nexport const Value = styled.div(({ color }) => (`\r\n   color: ${color};\r\n`\r\n));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import * as C from './styles';\r\n\r\nimport { formatDate } from '../../helpers/dateFilter'\r\nimport { categoriesType } from '../../helpers/dateFilter'\r\n\r\n\r\n\r\nexport const TableItem = ( { item } ) => {\r\n    \r\n    return(\r\n\r\n        <C.TableLine>\r\n            <C.TableColumn>{formatDate(item.date)}</C.TableColumn>\r\n            <C.TableColumn>\r\n                <C.Category color = { categoriesType(item.category).color}>\r\n            {categoriesType(item.category).title}\r\n                </C.Category>\r\n            </C.TableColumn>\r\n            <C.TableColumn>{item.title}</C.TableColumn>\r\n            <C.TableColumn>\r\n                <C.Value color={ categoriesType(item.category).expense ? 'red' : 'green'}>\r\n                R$ {item.value}\r\n                </C.Value>\r\n            </C.TableColumn>\r\n        </C.TableLine>\r\n    )\r\n}","import * as C from './styles';\r\nimport { TableItem } from '../TableItem';\r\nexport const TableArea = ( { list } ) => {\r\n    return(\r\n        <C.Table>\r\n            <thead>\r\n                <tr>\r\n                    <C.TableHeadColumn width={100}>Data</C.TableHeadColumn>\r\n                    <C.TableHeadColumn width={130}>Categoria</C.TableHeadColumn>\r\n                    <C.TableHeadColumn>Título</C.TableHeadColumn>\r\n                    <C.TableHeadColumn width={150}>Valor</C.TableHeadColumn>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {list.map((item,index)=>(\r\n                    <TableItem key={index} item={item}/>\r\n                ))}\r\n            </tbody>\r\n        </C.Table>\r\n    );\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    background-color: #FFF;\r\n    box-shadow: 0px 0px 5px #CCC;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    margin-top: -40px;\r\n    display:flex;\r\n    align-items: center;\r\n`;\r\n\r\nexport const MonthArea = styled.div`\r\n    flex: 1;\r\n    display:flex;\r\n    align-items: center;\r\n`;\r\n\r\nexport const MonthArrow = styled.div`\r\n    width: 40px;\r\n    text-align: center;\r\n    font-size: 25px;\r\n    cursor:pointer;\r\n`;\r\n\r\nexport const MonthTitle = styled.div`\r\n    flex: 1;\r\n    text-align: center;\r\n`;\r\n\r\nexport const ResumeArea = styled.div`\r\n    flex: 2;\r\n    display: flex;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    flex: 1;\r\n\r\n`;\r\n\r\nexport const Title = styled.div`\r\n    text-align: center;\r\n    font-weight: bold;\r\n    color: #888;\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nexport const Info = styled.div(({ color }) => (`\r\n    text-align: center;\r\n    font-weight: bold;\r\n    color: ${color ?? '#000'};\r\n`));","import * as C  from './styles'\r\n\r\nexport const ResumeItem = ({title, value, color}) => {\r\n    return (\r\n        <C.Container>\r\n            <C.Title>{title}</C.Title>\r\n            <C.Info color = {color}> R$ {value}</C.Info>\r\n        </C.Container>\r\n    );\r\n}","import { formatCurrentMonth } from '../../helpers/dateFilter';\r\nimport * as C from './styles';\r\nimport { ResumeItem } from '../ResumeItem';\r\n\r\nexport const InfoArea = ({ currentMonth, onMonthChange, income, expense}) => {\r\n\r\n        const handlePrevMonth = () => { \r\n            let [year, month] = currentMonth.split('-');\r\n            let currentDate = new Date(parseInt(year), parseInt(month)-1, 1);\r\n            currentDate.setMonth( currentDate.getMonth() - 1 );\r\n            onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() +1 }`);\r\n        }\r\n\r\n        const handleNextMonth = () => {\r\n            let [year, month] = currentMonth.split('-');\r\n            let currentDate = new Date(parseInt(year), parseInt(month)-1, 1);\r\n            currentDate.setMonth( currentDate.getMonth() + 1 );\r\n            onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth()+1}`);\r\n        }\r\n        \r\n\r\n    return(\r\n        <C.Container>\r\n            <C.MonthArea>\r\n                <C.MonthArrow onClick = {handlePrevMonth}>⬅️</C.MonthArrow>\r\n                <C.MonthTitle>{formatCurrentMonth(currentMonth)}</C.MonthTitle>\r\n                <C.MonthArrow onClick = {handleNextMonth} >➡️</C.MonthArrow>\r\n            </C.MonthArea>\r\n            <C.ResumeArea>\r\n                <ResumeItem title=\"Receita\" value={income}/>\r\n                <ResumeItem title=\"Despesas\" value = {expense}/>\r\n                <ResumeItem title=\"Balanço\" \r\n                value = {income - expense}\r\n                color = {(income-expense) < 0 ? 'red' : 'green'}/>\r\n            </C.ResumeArea>\r\n        </C.Container>\r\n    );\r\n}","import styled from \"styled-components\";\r\n\r\n\r\nexport const Container = styled.div`\r\n    background-color: #FFF;\r\n    box-shadow: 0px 0px 5px #CCC;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    margin-top: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nexport const InputLabel = styled.label`\r\n    flex:1;\r\n    margin: 10px;\r\n`;\r\n\r\nexport const InputTitle = styled.div`\r\n    font-weight:bold;\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    width: 100%;\r\n    height:30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    border-radius:5px;\r\n`;\r\n\r\nexport const Select = styled.select`\r\n    width:100%;\r\n    height: 30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    border-radius: 5px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    background-color: lightblue;\r\n    color:black;\r\n    cursor: pointer;\r\n\r\n    &:hover{\r\n        background-color: blue;\r\n        color: white;\r\n    }\r\n    `;\r\n","import { useState } from 'react/cjs/react.development'\r\nimport { category } from '../../data/categories';\r\nimport * as C from './styles'\r\nimport { categoriesTitle } from '../../helpers/dateFilter';\r\n\r\nexport const InputArea = ( { onAdd }) => {\r\n\r\n    const[dateField, setDateField] = useState('');\r\n    const[categoryField, setCategoryField] = useState('');\r\n    const[titleField, setTitleField] = useState('');\r\n    const[valueField, setValueField] = useState(0);\r\n    \r\n    let categoryKeys = Object.keys(category);\r\n\r\n    const handleAddEvent = () =>{\r\n        let erros = [];\r\n\r\n        if(isNaN(new Date(dateField).getTime())) {\r\n            erros.push('Data inválida!');\r\n        }\r\n\r\n        if(!categoryKeys.includes(categoryField)){\r\n            erros.push('Categoria Inválida');\r\n        }\r\n        if(titleField === ''){\r\n            erros.push('Titulo vazio!')\r\n        } \r\n        if(valueField <= 0){\r\n            erros.push('Valor Inválido!');\r\n        }\r\n\r\n        if(erros.length > 0){\r\n            alert(erros.join(\"\\n\"))\r\n        }else{\r\n            onAdd({\r\n                date: new Date(dateField),\r\n                category: category[categoryField].type,\r\n                title: titleField,\r\n                value: valueField\r\n            }\r\n            );\r\n            clearFields();\r\n        }\r\n        \r\n        }\r\n\r\n        const clearFields = () => {\r\n            setDateField('');\r\n            setCategoryField('');\r\n            setTitleField('');\r\n            setValueField(0);\r\n        }\r\n\r\n    return(\r\n        <C.Container>\r\n            <C.InputLabel>\r\n                <C.InputTitle>Data</C.InputTitle>\r\n                <C.Input type=\"date\" value={dateField} onChange={e => setDateField(e.target.value)}></C.Input>\r\n            </C.InputLabel>\r\n            <C.InputLabel>\r\n                <C.InputTitle>Categoria</C.InputTitle>\r\n                <C.Select value={categoryField} onChange= {e => setCategoryField(e.target.value)}>\r\n                    <>\r\n                        <option></option>\r\n                        {categoryKeys.map((key,index) => (\r\n                            <option key={index} value={key}>{category[key].title}</option>\r\n                        ))}\r\n                    </>\r\n                </C.Select>\r\n            </C.InputLabel>\r\n            <C.InputLabel>\r\n                <C.InputTitle>Título</C.InputTitle>\r\n                <C.Input type=\"text\" value={titleField} onChange={e => setTitleField(e.target.value)}></C.Input>\r\n            </C.InputLabel>\r\n            <C.InputLabel>\r\n                <C.InputTitle>Valor</C.InputTitle>\r\n                <C.Input type=\"number\" value={valueField} onChange={e => setValueField(parseFloat(e.target.value))}></C.Input>\r\n            </C.InputLabel>\r\n            <C.InputLabel>\r\n                <C.InputTitle>➕</C.InputTitle>\r\n                <C.Button onClick={handleAddEvent}>Adicionar</C.Button>\r\n            </C.InputLabel>\r\n        </C.Container>\r\n    );\r\n}","import { useState, useEffect} from 'react';\nimport * as C from './App.styles'\nimport { items } from './data/items';\nimport { categoriesTitle, categoriesType, getCurrentMonth } from './helpers/dateFilter';\nimport { FilterListByMonth } from './helpers/dateFilter';\nimport { TableArea } from './components/TableArea';\nimport { InfoArea } from './components/InfoArea';\nimport { InputArea } from './components/InputArea';\n\n\nconst App = () => {\n    const [list, setList] = useState(items);\n    const [filteredList, setFilteredList] = useState([]);\n    const [currentMonth, setCurrentMonth] = useState(getCurrentMonth());\n    const [income, setIncome] = useState(0);\n    const [expense, setExpense] = useState(0);\n\n    useEffect(()=> {\n      setFilteredList( FilterListByMonth(list, currentMonth) );\n    }, [list, currentMonth]);\n\n    useEffect(()=>{\n      let incomeCount = 0;\n      let expenseCount = 0;\n\n      for(let i in filteredList){\n        if(categoriesType(filteredList[i].category).expense){\n          expenseCount += filteredList[i].value;\n        }else{\n          incomeCount += filteredList[i].value;\n        }\n      }\n\n      setIncome(incomeCount);\n      setExpense(expenseCount);\n\n    },[filteredList]);\n    const handleMonthChange = (newMonth) => {\n        setCurrentMonth(newMonth);\n    }\n\n    const handleAddItem = (Item) => {\n        let newList = [...list];\n        console.log(newList);\n        newList.push(Item);\n        setList(newList);\n    }\n\n    return(\n      <C.Container>\n        <C.Header>\n          <C.HeaderText>Sistema Financeiro</C.HeaderText>\n        </C.Header>\n        <C.Body>\n          <InfoArea \n          currentMonth={currentMonth}\n          onMonthChange={handleMonthChange}\n          income = {income}\n          expense = {expense}\n          />\n          <InputArea onAdd = {handleAddItem}/>\n          <TableArea list={filteredList}/>\n        </C.Body>\n      </C.Container>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}